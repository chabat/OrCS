[Parameters]
# ~ python ../PinPoints/scripts/sinuca_pinpoints.py --delete --cfg ../sinuca_tracer/scripts/ls.test.cfg -lrbsp -WT
# ~ python ../PinPoints/scripts/sinuca_pinpoints.py --delete --cfg ../sinuca_tracer/scripts/ls.test.cfg -lbsp -T
#==============================================================================#
# ~ General parameter options:
# ~ These options allow the user to define tracing parameters. They can
# ~ also be given in the tracing configuration file(s). Command line
# ~ options over-ride parameters defined in the configuration file(s).
# ~ IMPORTANT NOTE: When using SDE (not PinPlay), the two parameters
# ~ 'program_name' and 'input_name' can NOT have either the char '.' or
# ~ '_' in them.

sinuca_tracer_output: "result.invmat.out"
# The output files base name

sinuca_tracer_threads: 1
# Number of threads used in the program from 'command'.
# Usually the programs are sequential, so 1.
# If the number is greater than the threads on the program,
# some empty files will be generated, corresponding to the 
# non-existing threads

sinuca_tracer_parallel_start: -1
sinuca_tracer_parallel_end: -1
# Just let like this, unless you know what are doing

program_name:   invmat
# ~ program_name: ls
# ~ --program_name=PROGRAM_NAME
# ~ Name of the application to trace. No default. Must be
# ~ defined in either the tracing configuration file or
# ~ this option. NOTE: This paramater can NOT have either
# ~ the char '.' or '_' in it.

input_name:     test
# ~ input_name: test
# ~ --input_name=INPUT_NAME
# ~ Name of the input file or workload. No default. Must
# ~ be defined in either the tracing configuration file or
# ~ this option.  NOTE: This paramater can NOT have either
# ~ the char '.' or '_' in it.
# ~ command: ls

command=        "/home/war/ICC/base/invmat -r 20 -i 128"
# ~ --command=COMMAND
# ~ COMMAND is the command line used to run the
# ~ application being traced (binary and all required
# ~ options). Must use " to bracket the command if it
# ~ contains more than one string. For example: "ls -l".
# ~ No default. Must be defined in either a tracing
# ~ configuration file or this option.

pinplayhome:    /home/war/OrCS/trace_generator/
# ~ --pinplayhome=PINPLAYHOME
# ~ Set the directory where the the PinPlay kit is
# ~ located. Default: $HOME/pinplay

compressed:     gzip
# ~ --compressed=COMP
# ~ COMP specifies which compression mode to be used
# ~ (none, bzip2, gzip).  Default: bzip2

# ~ -f FOCUS_THREAD, --focus_thread=FOCUS_THREAD
# ~ Thread to use when running Simpoint & generating
# ~ region pinballs for multi-thread apps. Default: 0.

mode:           st
# ~ mode:           st
# ~ --mode=MODE
# ~ MODE specifies the type of program to be logged. No
# ~ default. Must be defined in either a tracing
# ~ configuration file or this option.
# ~ st - single-threaded
# ~ mt - multi-threaded
# ~ mpi - MPI single-threaded
# ~ mpi_mt - MPI multi-threaded

num_cores:      1
# ~ --num_cores=NUM_CORES
# ~ Number of cores to use for running phases
# ~ concurrently.  Default is the number of cores on the
# ~ system.  Set to 1 to run serially.

arch: intel64
# ~ --mpi_options=MPI_OPTIONS
# ~ Defines the MPI environment variables used to run the
# ~ application.  Default values for these variables are:
# ~ -n num_proc
# ~ -env I_MPI_DEVICE shm
# ~ -env I_MPI_SPIN_COUNT 2147483647
# ~ -env I_MPI_PIN_MODE lib
# ~ -env I_MPI_PIN_PROCS
# ~ 3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12
# ~ -env I_MPI_DEBUG 4

num_proc:       1
# ~ -n NUM_PROC, --num_proc=NUM_PROC
# ~ Number of processes. Default: 1
#==============================================================================#

# ~ Simpoint parameter options:
# ~ These options define parameters which are used in the Simpoint phase
# ~ (--simpoint).

cutoff:         1.0
# ~ --cutoff=CUTOFF
# ~ Value which defines the fraction of the representative
# ~ regions to use when generating region pinballs.
# ~ (1.0 >= CUTOFF > 0)  Default: 1.0

maxk:           1
# ~ --maxk=MAXK
# ~ Set the value MAXK for Simpoint. This is the maximum
# ~ number of traces which may be generated.  Fewer traces
# ~ will be generated in many cases. Default: 20

slice_size:     1000
# ~ -S SLICE_SIZE, --slice_size=SLICE_SIZE
# ~ Number of instructions in each slice (representative
# ~ region). Default: 30,000,000
# ~ --simpoint_options=SIMPOINT_OPTIONS
# ~ Options passed to the Simpoint binary. NOTE: Replaces
# ~ the '-maxK' and '-coveragePct' options normally given
# ~ on the Simpoint command line.  Must use either '-k' or
# ~ '-maxK' explicitly when running Simpoints with this
# ~ option.
#==============================================================================#

# ~ Region pinball generation parameter options:
# ~ These options define parameters which are used in the region pinball
# ~ generation phase (--region_pinball).

epilog_length:  0
# ~ --epilog_length=EPILOG_LENGTH
# ~ Number of extra instruction to be included after
# ~ region. Default: 0

prolog_length:  0
# ~ --prolog_length=PROLOG_LENGTH
# ~ Number of extra instruction to be included before the
# ~ region. Default: 0

warmup_length:  1
# ~ -w WARMUP_LENGTH, --warmup_length=WARMUP_LENGTH
# ~ Number of extra instruction to be included before
# ~ prolog. Default: 500,000,000

debug:          False
verbose:        False
#==============================================================================#
# ~ Phase options:
# ~ These options select the tracing phases to execute. Either one, or
# ~ more, phase option must be given or the option '--default_phases'
# ~ which runs all default phases. Must define parameters 'program_name'
# ~ and 'input_name' for every phase.  The logging phase '-log' also
# ~ requires 'command' and 'mode'.  Phases are executed in the order given
# ~ below:

# ~ --default_phases
# ~ Always run these default phases: log,
# ~ basic_block_vector, simpoint, and region_pinball.
# ~ When using some simulators one, or more, of these
# ~ additional phases may also be run by default:
# ~ whole_sim, region_sim, pred_error.  Additional phases
# ~ are also run by default with SDE.

# ~ --native_pure
# ~ Run the application on the HW, without Pin or Pintools
# ~ (no logging).

# ~ -l, --log
# ~ Generate whole program pinballs for the application.
# ~ Required parameters: program_name, input_name,
# ~ command, mode

# ~ -r, --replay
# ~ Replay all whole program pinballs.

# ~ -b, --basic_block_vector
# ~ Generate basic block vectors (BBV) for whole program
# ~ pinballs.

# ~ -s, --simpoint
# ~ Run Simpoint using whole program pinball basic block
# ~ vectors (BBV).

# ~ -p, --region_pinball
# ~ Relog whole program pinballs using representative
# ~ regions from Simpoint to generate region pinballs.

# ~ -R, --replay_region
# ~ Replay all region pinballs.

# ~ -T, --region_sim
# ~ Run the simulator on the region pinballs.

# ~ -W, --whole_sim
# ~ Run the simulator on the whole program pinballs.

# ~ -c, --pred_error, --calc_func
# ~ Calculate the prediction error, using the metric of
# ~ interest, for a set of representative regions.  Must
# ~ have already generated simulator data, either using
# ~ phases '--whole_sim' and '--region_sim' or the
# ~ appropriate options for your simulator,  before
# ~ running this phase.  ('--calc_func' is included for
# ~ backward compatability.)

